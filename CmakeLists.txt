cmake_minimum_required(VERSION 3.15)
project(ToyBox LANGUAGES C CXX OBJC)

# Set default build type to Debug if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# Define the minimum required C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set the minimum macOS deployment target
set(CMAKE_OSX_DEPLOYMENT_TARGET "14.0" CACHE STRING "Minimum OS X deployment version")

# External dependencies directory
set(EXTERNAL_DIR ${CMAKE_SOURCE_DIR}/external)

# ========================
# Add External Dependencies
# ========================

# Add AllocX (CMake-based dependency)
add_subdirectory(${EXTERNAL_DIR}/AllocX)

# Add Phyzzy (CMake-based dependency)
add_subdirectory(${EXTERNAL_DIR}/Phyzzy)

# Add EmberScript (Makefile-based dependency)
include(ExternalProject)
ExternalProject_Add(
    EmberScript
    SOURCE_DIR ${EXTERNAL_DIR}/EmberScript
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND "" # Skip configure step
    BUILD_COMMAND make
    INSTALL_COMMAND "" # No install step needed
    BUILD_BYPRODUCTS ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a # Declare expected output
    BUILD_ALWAYS 1 # Always build to ensure deployment target matches
)

# Create an imported library for EmberScript
add_library(EmberScriptLib STATIC IMPORTED)
set_target_properties(EmberScriptLib PROPERTIES
    IMPORTED_LOCATION ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a
    INTERFACE_INCLUDE_DIRECTORIES ${EXTERNAL_DIR}/EmberScript/include
)

# Ensure EmberScriptLib is built after EmberScript
add_dependencies(EmberScriptLib EmberScript)

# Define SDL2 paths
set(SDL2_SOURCE_DIR ${EXTERNAL_DIR}/SDL2)  # Adjust if your SDL2 source is elsewhere
set(SDL2_INSTALL_DIR ${SDL2_SOURCE_DIR}/install)
set(SDL2_LIB_DIR ${SDL2_INSTALL_DIR}/lib)
set(SDL2_INCLUDE_DIR ${SDL2_INSTALL_DIR}/include)

# Add SDL2 (CMake-based dependency)
include(ExternalProject)
ExternalProject_Add(
    SDL2
    SOURCE_DIR ${SDL2_SOURCE_DIR}
    BINARY_DIR ${SDL2_SOURCE_DIR}/build
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${SDL2_INSTALL_DIR}
        -DSDL_STATIC=ON
        -DSDL_TEST=OFF
        -DSDL_VIDEO_VULKAN=ON  # Enable Vulkan support for SDL2
        -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    BUILD_COMMAND ${CMAKE_COMMAND} --build .
    INSTALL_COMMAND ${CMAKE_COMMAND} --install .
)

# Create an imported library for SDL2
# SDL2 static library location is corrected here to handle cases where SDL2 produces a shared library or renamed files.
find_library(SDL2_LIB NAMES SDL2 PATHS ${SDL2_LIB_DIR})
add_library(SDL2Lib STATIC IMPORTED)
set_target_properties(SDL2Lib PROPERTIES
    IMPORTED_LOCATION ${SDL2_LIB} # Adjust based on found library file
    INTERFACE_INCLUDE_DIRECTORIES ${SDL2_INCLUDE_DIR}
)

# Ensure SDL2Lib is built after SDL2
add_dependencies(SDL2Lib SDL2)

# Find Vulkan SDK for macOS
find_library(VULKAN_LIBRARY NAMES vulkan HINTS $ENV{VULKAN_SDK}/lib)
find_path(VULKAN_INCLUDE_DIR NAMES vulkan/vulkan.h HINTS $ENV{VULKAN_SDK}/include)

if(VULKAN_LIBRARY AND VULKAN_INCLUDE_DIR)
    message(STATUS "Found Vulkan library: ${VULKAN_LIBRARY}")
    message(STATUS "Found Vulkan include directory: ${VULKAN_INCLUDE_DIR}")
    include_directories(${VULKAN_INCLUDE_DIR})
else()
    message(FATAL_ERROR "Vulkan SDK not found. Please install the Vulkan SDK and set VULKAN_SDK environment variable.")
endif()

# Add Google Test as a submodule
add_subdirectory(${EXTERNAL_DIR}/googletest)

# ========================
# External Libraries to Link
# ========================
set(EXTERNAL_LIBS AllocX PhyzzyLib EmberScriptLib SDL2Lib)

# ========================
# Add Engine Modules
# ========================
add_subdirectory(engine/ecs)
add_subdirectory(engine/memory)
add_subdirectory(engine/physics)
add_subdirectory(engine/rendering)
add_subdirectory(engine/scene)
add_subdirectory(engine/scripting)
add_subdirectory(engine/ui)
add_subdirectory(engine/utils)

# ========================
# Global ToyBoxEngine Library
# ========================
add_library(ToyBoxEngine INTERFACE)
target_link_libraries(ToyBoxEngine INTERFACE ${EXTERNAL_LIBS})

# Include external dependencies in ToyBoxEngine (handled via target properties)
target_include_directories(ToyBoxEngine INTERFACE
    ${EXTERNAL_DIR}/Phyzzy/include
    ${EXTERNAL_DIR}/AllocX/include
    # SDL2 include directory is provided via SDL2Lib
)

# Add dependency between ToyBoxEngine and external libraries
add_dependencies(ToyBoxEngine PhyzzyLib EmberScriptLib SDL2Lib)

# ========================
# Add ToyBox Executable
# ========================
add_executable(ToyBoxApp main.cpp)

# Link the ToyBoxEngine library, Vulkan, and macOS frameworks to the executable
target_link_libraries(ToyBoxApp PRIVATE ToyBoxEngine ${VULKAN_LIBRARY})

# List of required macOS frameworks for SDL
set(MACOSX_FRAMEWORKS
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreFoundation"
    "-framework CoreVideo"
    "-framework Carbon"
    "-framework ForceFeedback"
    "-framework AudioToolbox"
    "-framework AVFoundation"
    "-framework Metal"
    "-framework QuartzCore"
    "-framework CoreGraphics"
    "-framework CoreAudio"
    "-framework CoreHaptics"
    "-framework CoreMedia"
    "-framework GameController"
    "-framework UniformTypeIdentifiers"
)

# Link the frameworks to executable
target_link_libraries(ToyBoxApp PRIVATE ${MACOSX_FRAMEWORKS})

# Set the linker language to C++
set_target_properties(ToyBoxApp PROPERTIES LINKER_LANGUAGE CXX)

# ========================
# Add Testing Support
# ========================
enable_testing()

# ========================
# Test Subdirectories
# ========================
# Assume the test subdirectories have their own CMakeLists.txt files.
add_subdirectory(tests/dynamicstring)
add_subdirectory(tests/hashmap)
add_subdirectory(tests/dynamicarray)
