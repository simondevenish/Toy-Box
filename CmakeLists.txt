cmake_minimum_required(VERSION 3.15)
project(ToyBox LANGUAGES C CXX OBJC)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_OSX_DEPLOYMENT_TARGET "14.0" CACHE STRING "Minimum OS X deployment version")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(EXTERNAL_DIR ${CMAKE_SOURCE_DIR}/external)

# ========================
# Add External Dependencies
# ========================
add_subdirectory(${EXTERNAL_DIR}/AllocX)
set_target_properties(AllocX PROPERTIES FOLDER "External")

add_subdirectory(${EXTERNAL_DIR}/Phyzzy)
set_target_properties(PhyzzyLib PROPERTIES FOLDER "External")

include(ExternalProject)
ExternalProject_Add(
    EmberScript
    SOURCE_DIR ${EXTERNAL_DIR}/EmberScript
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND "" # Skip configure
    BUILD_COMMAND make
    INSTALL_COMMAND ""
    BUILD_BYPRODUCTS ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a
    BUILD_ALWAYS 1
)

if(TARGET EmberScript)
    set_target_properties(EmberScript PROPERTIES FOLDER "External")
endif()

add_library(EmberScriptLib STATIC IMPORTED)
set_target_properties(EmberScriptLib PROPERTIES
    IMPORTED_LOCATION ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a
    INTERFACE_INCLUDE_DIRECTORIES ${EXTERNAL_DIR}/EmberScript/include
    FOLDER "External"
)
add_dependencies(EmberScriptLib EmberScript)

if(APPLE)
    find_library(VULKAN_LIBRARY NAMES vulkan HINTS $ENV{VULKAN_SDK}/lib)
    find_path(VULKAN_INCLUDE_DIR NAMES vulkan/vulkan.h HINTS $ENV{VULKAN_SDK}/include)
    if(VULKAN_LIBRARY AND VULKAN_INCLUDE_DIR)
        message(STATUS "Found Vulkan library: ${VULKAN_LIBRARY}")
        message(STATUS "Found Vulkan include directory: ${VULKAN_INCLUDE_DIR}")
        include_directories(${VULKAN_INCLUDE_DIR})
    else()
        message(FATAL_ERROR "Vulkan SDK not found. Please install the Vulkan SDK and set VULKAN_SDK environment variable.")
    endif()
endif()

add_subdirectory(${EXTERNAL_DIR}/googletest)
if(TARGET gtest)
    set_target_properties(gtest PROPERTIES FOLDER "External/GoogleTest")
endif()
if(TARGET gtest_main)
    set_target_properties(gtest_main PROPERTIES FOLDER "External/GoogleTest")
endif()
if(TARGET gmock)
    set_target_properties(gmock PROPERTIES FOLDER "External/GoogleTest")
endif()
if(TARGET gmock_main)
    set_target_properties(gmock_main PROPERTIES FOLDER "External/GoogleTest")
endif()

set(EXTERNAL_LIBS AllocX PhyzzyLib EmberScriptLib)

# ========================
# Add Engine Modules
# ========================
add_subdirectory(engine/ecs)
add_subdirectory(engine/memory)
add_subdirectory(engine/physics)
add_subdirectory(engine/rendering)
add_subdirectory(engine/scene)
add_subdirectory(engine/scripting)
add_subdirectory(engine/ui)
add_subdirectory(engine/utils)

if(TARGET MemoryModule)
    set_target_properties(MemoryModule PROPERTIES FOLDER "Engine/Modules")
endif()
if(TARGET PhysicsModule)
    set_target_properties(PhysicsModule PROPERTIES FOLDER "Engine/Modules")
endif()
if(TARGET ScriptingModule)
    set_target_properties(ScriptingModule PROPERTIES FOLDER "Engine/Modules")
endif()

# Add headers and inl files to DataStructures if it exists
file(GLOB DATA_STRUCTURES_HEADERS 
    "${CMAKE_SOURCE_DIR}/engine/utils/data_structures/*.h"
    "${CMAKE_SOURCE_DIR}/engine/utils/data_structures/*.inl"
)

if(TARGET DataStructures)
    # Add header and inl files to the DataStructures target
    target_sources(DataStructures PRIVATE ${DATA_STRUCTURES_HEADERS})
    source_group("Header Files" FILES ${DATA_STRUCTURES_HEADERS})
    set_target_properties(DataStructures PROPERTIES FOLDER "Engine/Modules")
endif()

add_library(ToyBoxEngine INTERFACE)
target_link_libraries(ToyBoxEngine INTERFACE ${EXTERNAL_LIBS})
target_include_directories(ToyBoxEngine INTERFACE
    ${EXTERNAL_DIR}/Phyzzy/include
    ${EXTERNAL_DIR}/AllocX/include
)
add_dependencies(ToyBoxEngine PhyzzyLib EmberScriptLib)
set_target_properties(ToyBoxEngine PROPERTIES FOLDER "Engine")

add_executable(ToyBoxApp main.cpp)
set_target_properties(ToyBoxApp PROPERTIES FOLDER "Applications")

if(APPLE)
    target_link_libraries(ToyBoxApp PRIVATE ToyBoxEngine ${VULKAN_LIBRARY})
else()
    target_link_libraries(ToyBoxApp PRIVATE ToyBoxEngine)
endif()

if(APPLE)
    set(MACOSX_FRAMEWORKS
        "-framework Cocoa"
        "-framework IOKit"
        "-framework CoreFoundation"
        "-framework CoreVideo"
        "-framework AudioToolbox"
        "-framework AVFoundation"
        "-framework Metal"
        "-framework QuartzCore"
        "-framework CoreGraphics"
        "-framework CoreAudio"
        "-framework CoreMedia"
        "-framework UniformTypeIdentifiers"
    )
    target_link_libraries(ToyBoxApp PRIVATE ${MACOSX_FRAMEWORKS})
endif()

set_target_properties(ToyBoxApp PROPERTIES LINKER_LANGUAGE CXX)

enable_testing()

add_subdirectory(tests/dynamicstring)
add_subdirectory(tests/hashmap)
add_subdirectory(tests/dynamicarray)

if(TARGET DynamicArrayTests)
    set_target_properties(DynamicArrayTests PROPERTIES FOLDER "Tests")
endif()
if(TARGET DynamicStringTests)
    set_target_properties(DynamicStringTests PROPERTIES FOLDER "Tests")
endif()
if(TARGET HashMapTests)
    set_target_properties(HashMapTests PROPERTIES FOLDER "Tests")
endif()

if(TARGET ALL_BUILD)
    set_target_properties(ALL_BUILD PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET ZERO_CHECK)
    set_target_properties(ZERO_CHECK PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET INSTALL)
    set_target_properties(INSTALL PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET RUN_TESTS)
    set_target_properties(RUN_TESTS PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET Continuous)
    set_target_properties(Continuous PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET Nightly)
    set_target_properties(Nightly PROPERTIES FOLDER "CMake Utilities")
endif()
if(TARGET NightlyMemoryCheck)
    set_target_properties(NightlyMemoryCheck PROPERTIES FOLDER "CMake Utilities")
endif()
