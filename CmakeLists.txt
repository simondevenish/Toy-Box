cmake_minimum_required(VERSION 3.15)
project(ToyBox LANGUAGES C CXX OBJC)

# Set default build type to Debug if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# Define the minimum required C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set the minimum macOS deployment target
set(CMAKE_OSX_DEPLOYMENT_TARGET "14.0" CACHE STRING "Minimum OS X deployment version")

# External dependencies directory
set(EXTERNAL_DIR ${CMAKE_SOURCE_DIR}/external)

# ========================
# Add External Dependencies
# ========================

# Add AllocX (CMake-based dependency)
add_subdirectory(${EXTERNAL_DIR}/AllocX)

# Add Phyzzy (CMake-based dependency)
add_subdirectory(${EXTERNAL_DIR}/Phyzzy)

# Add EmberScript (Makefile-based dependency)
include(ExternalProject)
ExternalProject_Add(
    EmberScript
    SOURCE_DIR ${EXTERNAL_DIR}/EmberScript
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND "" # Skip configure step
    BUILD_COMMAND make
    INSTALL_COMMAND "" # No install step needed
    BUILD_BYPRODUCTS ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a # Declare expected output
    BUILD_ALWAYS 1 # Always build to ensure deployment target matches
)

# Create an imported library for EmberScript
add_library(EmberScriptLib STATIC IMPORTED)
set_target_properties(EmberScriptLib PROPERTIES
    IMPORTED_LOCATION ${EXTERNAL_DIR}/EmberScript/build/libEmberScript.a
    INTERFACE_INCLUDE_DIRECTORIES ${EXTERNAL_DIR}/EmberScript/include
)

# Ensure EmberScriptLib is built after EmberScript
add_dependencies(EmberScriptLib EmberScript)

# Define SDL paths
set(SDL_SOURCE_DIR ${EXTERNAL_DIR}/SDL2)  # Adjust if your SDL source is elsewhere
set(SDL_INSTALL_DIR ${SDL_SOURCE_DIR}/install)
set(SDL_LIB_DIR ${SDL_INSTALL_DIR}/lib)
set(SDL_INCLUDE_DIR ${SDL_INSTALL_DIR}/include)

# Add SDL3 (CMake-based dependency)
include(ExternalProject)
ExternalProject_Add(
    SDL3
    SOURCE_DIR ${SDL_SOURCE_DIR}
    BINARY_DIR ${SDL_SOURCE_DIR}/build
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${SDL_INSTALL_DIR}
        -DSDL_STATIC=ON
        -DSDL_TEST=OFF
        -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    BUILD_COMMAND ${CMAKE_COMMAND} --build .
    INSTALL_COMMAND ${CMAKE_COMMAND} --install .
    BUILD_BYPRODUCTS ${SDL_LIB_DIR}/libSDL3.a # Adjust based on your platform and actual file name
)

# Create an imported library for SDL3
add_library(SDL3Lib STATIC IMPORTED)
set_target_properties(SDL3Lib PROPERTIES
    IMPORTED_LOCATION ${SDL_LIB_DIR}/libSDL3.a # Adjust based on actual library file name
    INTERFACE_INCLUDE_DIRECTORIES ${SDL_INCLUDE_DIR}
)

# Ensure SDL3Lib is built after SDL3
add_dependencies(SDL3Lib SDL3)

# Add Google Test as a submodule
add_subdirectory(${EXTERNAL_DIR}/googletest)

# ========================
# External Libraries to Link
# ========================
set(EXTERNAL_LIBS AllocX PhyzzyLib EmberScriptLib SDL3Lib)

# ========================
# Add Engine Modules
# ========================
add_subdirectory(engine/ecs)
add_subdirectory(engine/memory)
add_subdirectory(engine/physics)
add_subdirectory(engine/rendering)
add_subdirectory(engine/scene)
add_subdirectory(engine/scripting)
add_subdirectory(engine/ui)
add_subdirectory(engine/utils)

# ========================
# Global ToyBoxEngine Library
# ========================
add_library(ToyBoxEngine INTERFACE)
target_link_libraries(ToyBoxEngine INTERFACE ${EXTERNAL_LIBS})

# Include external dependencies in ToyBoxEngine (handled via target properties)
target_include_directories(ToyBoxEngine INTERFACE
    ${EXTERNAL_DIR}/Phyzzy/include
    ${EXTERNAL_DIR}/AllocX/include
    # SDL3 include directory is provided via SDL3Lib
)

# Add dependency between ToyBoxEngine and external libraries
add_dependencies(ToyBoxEngine PhyzzyLib EmberScriptLib SDL3Lib)

# ========================
# Add ToyBox Executable
# ========================
add_executable(ToyBoxApp main.cpp)

# Link the ToyBoxEngine library and macOS frameworks to the executable
target_link_libraries(ToyBoxApp PRIVATE ToyBoxEngine)

# List of required macOS frameworks for SDL
set(MACOSX_FRAMEWORKS
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreFoundation"
    "-framework CoreVideo"
    "-framework Carbon"
    "-framework ForceFeedback"
    "-framework AudioToolbox"
    "-framework AVFoundation"
    "-framework Metal"
    "-framework QuartzCore"
    "-framework CoreGraphics"
    "-framework CoreAudio"
    "-framework CoreHaptics"
    "-framework CoreMedia"
    "-framework GameController"
    "-framework UniformTypeIdentifiers"
)

# Link the frameworks to your executable
target_link_libraries(ToyBoxApp PRIVATE ${MACOSX_FRAMEWORKS})

# Set the linker language to C++
set_target_properties(ToyBoxApp PROPERTIES LINKER_LANGUAGE CXX)

# ========================
# Add Testing Support
# ========================
enable_testing()

# ========================
# Test Subdirectories
# ========================
# Assume the test subdirectories have their own CMakeLists.txt files.
add_subdirectory(tests/dynamicstring)
add_subdirectory(tests/hashmap)
add_subdirectory(tests/dynamicarray)
